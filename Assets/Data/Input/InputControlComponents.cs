//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/Data/Input/InputControlComponents.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControlComponents : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControlComponents()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControlComponents"",
    ""maps"": [
        {
            ""name"": ""Base Map"",
            ""id"": ""199d3cdc-d98a-451b-8bc5-ab2b9ca12663"",
            ""actions"": [
                {
                    ""name"": ""Mouse Click"",
                    ""type"": ""Button"",
                    ""id"": ""45542844-0361-467e-bbb0-1f264bcdf5b6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8b2aac3d-0cab-45b2-be99-0f4128ca5e48"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a61ac5fe-33e2-4f8a-b8f3-be9bba99b8f6"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0a955e7c-1231-4230-a22e-35175e95a85b"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Base Map
        m_BaseMap = asset.FindActionMap("Base Map", throwIfNotFound: true);
        m_BaseMap_MouseClick = m_BaseMap.FindAction("Mouse Click", throwIfNotFound: true);
        m_BaseMap_MousePosition = m_BaseMap.FindAction("MousePosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Base Map
    private readonly InputActionMap m_BaseMap;
    private IBaseMapActions m_BaseMapActionsCallbackInterface;
    private readonly InputAction m_BaseMap_MouseClick;
    private readonly InputAction m_BaseMap_MousePosition;
    public struct BaseMapActions
    {
        private @InputControlComponents m_Wrapper;
        public BaseMapActions(@InputControlComponents wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseClick => m_Wrapper.m_BaseMap_MouseClick;
        public InputAction @MousePosition => m_Wrapper.m_BaseMap_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_BaseMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BaseMapActions set) { return set.Get(); }
        public void SetCallbacks(IBaseMapActions instance)
        {
            if (m_Wrapper.m_BaseMapActionsCallbackInterface != null)
            {
                @MouseClick.started -= m_Wrapper.m_BaseMapActionsCallbackInterface.OnMouseClick;
                @MouseClick.performed -= m_Wrapper.m_BaseMapActionsCallbackInterface.OnMouseClick;
                @MouseClick.canceled -= m_Wrapper.m_BaseMapActionsCallbackInterface.OnMouseClick;
                @MousePosition.started -= m_Wrapper.m_BaseMapActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_BaseMapActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_BaseMapActionsCallbackInterface.OnMousePosition;
            }
            m_Wrapper.m_BaseMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MouseClick.started += instance.OnMouseClick;
                @MouseClick.performed += instance.OnMouseClick;
                @MouseClick.canceled += instance.OnMouseClick;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
            }
        }
    }
    public BaseMapActions @BaseMap => new BaseMapActions(this);
    public interface IBaseMapActions
    {
        void OnMouseClick(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
    }
}
